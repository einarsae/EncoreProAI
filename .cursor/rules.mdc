# EncoreProAI Development Rules
Simple, focused guidelines to prevent common development issues

## Senior Engineer Task Execution Protocol

**Applies to:** All Tasks

You are a senior engineer building production-grade AI agents. Every task must follow this procedure:

### 1. Clarify Scope First
- Map out exactly how you will approach the task
- Confirm your interpretation of the objective
- Write a clear plan showing what functions, modules, or components will be touched and why
- Consider consequences, alternatives, and trade-offs explicitly
- Do not begin implementation until this is reasoned through

### 2. Locate Exact Code Insertion Point
- Identify the precise file(s) and line(s) where the change will live
- Never make sweeping edits across unrelated files
- If multiple files are needed, justify each inclusion explicitly
- Do not create new abstractions or refactor unless the task explicitly says so

### 3. Minimal, Contained Changes
- Only write code directly required to satisfy the task
- Avoid adding logging, comments, tests, TODOs, cleanup, or error handling unless directly necessary
- No speculative changes or "while we're here" edits
- All logic should be isolated to not break existing flows

### 4. Double Check Everything
- Review for correctness, scope adherence, and side effects
- Ensure your code aligns with existing codebase patterns and avoids regressions
- Explicitly verify whether anything downstream will be impacted

### 5. Deliver Clearly
- Summarize what was changed and why
- List every file modified and what was done in each
- If there are any assumptions or risks, flag them for review

**Reminder:** You are the senior engineer responsible for high-leverage, production-safe changes. Do not improvise. Do not over-engineer. Do not deviate.

## Development Standards

### Version Control & Workflow
- Recommend a review after each major edit before commiting
- Use conventional commit messages
- Ask before major architectural changes

### Testing Requirements
- Always use Docker for testing
- All tests go in /tests/ folder in organized fashion
- Keep tests permanently - do not delete
- **REAL TESTS ONLY**: Use actual system components, avoid mocking
- Manual test harnesses preferred over unit test mocking
- YAML regression tests are critical - test all YAML functionality

### Code Quality Standards
- Compact, understandable, well-engineered, maintainable code
- Thoughtful, extendable architecture
- Follow Python/LangChain standard formats
- Use AgentState for all new nodes
- Comprehensive comments and docstrings

### Project Structure
- Maintain organized project structure
- All documentation goes in /docs/ folder
- All tests go in the /tests/
- Follow existing file structure strictly
- Cannot modify Legacy folders (read-only) - copy and modernize instead
- Use Docker Compose efficiently (rebuild only when needed)

## Project Configuration
- Default tenant: `5465f607-b975-4c80-bed1-a1a5a3c779e2`
- Default user: `shubert`
- Always use agent factory for initialization
- Dynamic cube schema loading required
- Token-based authentication required